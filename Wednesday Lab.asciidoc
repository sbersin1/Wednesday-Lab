import numpy as np def rule3(da, db): dQ = np.sqrt(da**2+db**2) return
dQ

d1 = 1.2 d2 = 1.3 errd1 = 0.01 errd2 = 0.01 errdtotal =
rule3(errd1,errd2) print (errdtotal)


+*In[7]:*+
[source, ipython3]
----
import numpy as np

def rule1(erra,c):
    dQ=c*erra
    return dQ
c=5
erra=0.0005
dQ=rule1(erra,c)
print("dQ",dQ)
----


+*Out[7]:*+
----
dQ 0.0025
----


+*In[13]:*+
[source, ipython3]
----
import numpy as np

def rule2(m,c,A,errA):
    dQ=(c*m*A**(m-1))*errA
    return dQ
m=2
c=5
A=3.2
errA=0.01
dQ=rule2(m,c,A,errA)
print("dQ=",dQ)
----


+*Out[13]:*+
----
dQ= 0.32
----


+*In[18]:*+
[source, ipython3]
----
import numpy as np

def rule4(m,n,erraA,A,erraB,B):
    dQ=np.sqrt((m*errA/A)**2)+((n*errB/B)**2)
    return dQ
m=2
n=2
A=3.2
errA=0.0005
B=3.2
errB=0.0005
dQ=rule4(m,n,errA,A,errB,B)
print("dQ",dQ)
----


+*Out[18]:*+
----
dQ 0.00031259765625
----


+*In[25]:*+
[source, ipython3]
----
import numpy as np

def rule4(m,n,erraA,A,erraB,B):
    dQ=np.sqrt((m*errA/A)**2)+((n*errB/B)**2)
    return dQ
m=1
n=-0.5
A=132
errA=0.0005
B=101.5
errB=0.002
dQ=rule4(m,n,errA,A,errB,B)
print("dQ",dQ)
----


+*Out[25]:*+
----
dQ 3.7879758540536526e-06
----


+*In[5]:*+
[source, ipython3]
----
import numpy as np

x= np.array([1.1,1.2,1.3,1.4,0.9,0.95,1.05])
std_x = np.std(x)
print ("standard dev x=",std_x)
xmean = np.average(x)
print ("xmean=",xmean)
----


+*Out[5]:*+
----
standard dev x= 0.16872874015739592
xmean= 1.1285714285714286
----

latexmath:[$\delta Q=\sqrt{(\delta A)^2+(\delta B)^2))}$]

latexmath:[$\delta v_i=2.3013*\sqrt{\frac {0.926}{103.44})^2+(\frac {-0.5*0.1)}{0.99})^2}$]


+*In[ ]:*+
[source, ipython3]
----

----
